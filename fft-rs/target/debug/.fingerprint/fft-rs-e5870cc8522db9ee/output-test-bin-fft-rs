{"$message_type":"diagnostic","message":"cycle detected when computing type of opaque `parallel_fft::{opaque#0}`","code":{"code":"E0391","explanation":"A type dependency cycle has been encountered.\n\nErroneous code example:\n\n```compile_fail,E0391\ntrait FirstTrait : SecondTrait {\n\n}\n\ntrait SecondTrait : FirstTrait {\n\n}\n```\n\nThe previous example contains a circular dependency between two traits:\n`FirstTrait` depends on `SecondTrait` which itself depends on `FirstTrait`.\n\nSee https://rustc-dev-guide.rust-lang.org/overview.html#queries and\nhttps://rustc-dev-guide.rust-lang.org/query.html for more information.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":92,"byte_end":158,"line_start":6,"line_end":6,"column_start":1,"column_end":67,"is_primary":true,"text":[{"text":"pub async fn parallel_fft(input: Vec<Complex64>) -> Vec<Complex64> {","highlight_start":1,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":92,"byte_end":158,"line_start":6,"line_end":6,"column_start":1,"column_end":67,"is_primary":false,"text":[{"text":"pub async fn parallel_fft(input: Vec<Complex64>) -> Vec<Complex64> {","highlight_start":1,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"...which requires borrow-checking `parallel_fft`...","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":92,"byte_end":158,"line_start":6,"line_end":6,"column_start":1,"column_end":67,"is_primary":true,"text":[{"text":"pub async fn parallel_fft(input: Vec<Complex64>) -> Vec<Complex64> {","highlight_start":1,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"...which requires borrow-checking `parallel_fft::{closure#0}`...","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":159,"byte_end":1242,"line_start":6,"line_end":53,"column_start":68,"column_end":2,"is_primary":true,"text":[{"text":"pub async fn parallel_fft(input: Vec<Complex64>) -> Vec<Complex64> {","highlight_start":68,"highlight_end":69},{"text":"    let n = input.len();","highlight_start":1,"highlight_end":25},{"text":"    if n <= 1 {","highlight_start":1,"highlight_end":16},{"text":"        return input;","highlight_start":1,"highlight_end":22},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let mut even = Vec::with_capacity(n / 2);","highlight_start":1,"highlight_end":46},{"text":"    let mut odd = Vec::with_capacity(n / 2);","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    for i in 0..(n / 2) {","highlight_start":1,"highlight_end":26},{"text":"        even.push(input[2 * i]);","highlight_start":1,"highlight_end":33},{"text":"        odd.push(input[2 * i + 1]);","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let even = Arc::new(even);","highlight_start":1,"highlight_end":31},{"text":"    let odd = Arc::new(odd);","highlight_start":1,"highlight_end":29},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let even_clone = Arc::clone(&even);","highlight_start":1,"highlight_end":40},{"text":"    let odd_clone = Arc::clone(&odd);","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let even_fut = task::spawn(async move {","highlight_start":1,"highlight_end":44},{"text":"        parallel_fft((*even_clone).clone()).await","highlight_start":1,"highlight_end":50},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let odd_fut = task::spawn(async move {","highlight_start":1,"highlight_end":43},{"text":"        parallel_fft((*odd_clone).clone()).await","highlight_start":1,"highlight_end":49},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let (even_fft, odd_fft) = tokio::join!(even_fut, odd_fut);","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let even_fft = even_fft.unwrap();","highlight_start":1,"highlight_end":38},{"text":"    let odd_fft = odd_fft.unwrap();","highlight_start":1,"highlight_end":36},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Combine results","highlight_start":1,"highlight_end":23},{"text":"    let mut output = vec![Complex64::new(0.0, 0.0); n];","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    for k in 0..(n / 2) {","highlight_start":1,"highlight_end":26},{"text":"        let t = Complex64::from_polar(","highlight_start":1,"highlight_end":39},{"text":"            1.0,","highlight_start":1,"highlight_end":17},{"text":"            -2.0 * PI * (k as f64) / (n as f64)","highlight_start":1,"highlight_end":48},{"text":"        ) * odd_fft[k];","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        output[k] = even_fft[k] + t;","highlight_start":1,"highlight_end":37},{"text":"        output[k + n/2] = even_fft[k] - t;","highlight_start":1,"highlight_end":43},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    output","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"...which requires evaluating `type_op_prove_predicate` `ProvePredicate { predicate: Binder { value: TraitPredicate(<{async block@src/main.rs:30:31: 32:6} as core::marker::Send>, polarity:Positive), bound_vars: [] } }`...","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"...which again requires computing type of opaque `parallel_fft::{opaque#0}`, completing the cycle","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"cycle used when computing type of `parallel_fft::{opaque#0}`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":92,"byte_end":158,"line_start":6,"line_end":6,"column_start":1,"column_end":67,"is_primary":true,"text":[{"text":"pub async fn parallel_fft(input: Vec<Complex64>) -> Vec<Complex64> {","highlight_start":1,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":92,"byte_end":158,"line_start":6,"line_end":6,"column_start":1,"column_end":67,"is_primary":false,"text":[{"text":"pub async fn parallel_fft(input: Vec<Complex64>) -> Vec<Complex64> {","highlight_start":1,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"see https://rustc-dev-guide.rust-lang.org/overview.html#queries and https://rustc-dev-guide.rust-lang.org/query.html for more information","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0391]\u001b[0m\u001b[0m\u001b[1m: cycle detected when computing type of opaque `parallel_fft::{opaque#0}`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:6:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn parallel_fft(input: Vec<Complex64>) -> Vec<Complex64> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: ...which requires borrow-checking `parallel_fft`...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:6:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn parallel_fft(input: Vec<Complex64>) -> Vec<Complex64> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: ...which requires borrow-checking `parallel_fft::{closure#0}`...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:6:68\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub async fn parallel_fft(input: Vec<Complex64>) -> Vec<Complex64> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m____________________________________________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let n = input.len();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if n <= 1 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        return input;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    output\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: ...which requires evaluating `type_op_prove_predicate` `ProvePredicate { predicate: Binder { value: TraitPredicate(<{async block@src/main.rs:30:31: 32:6} as core::marker::Send>, polarity:Positive), bound_vars: [] } }`...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: ...which again requires computing type of opaque `parallel_fft::{opaque#0}`, completing the cycle\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: cycle used when computing type of `parallel_fft::{opaque#0}`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:6:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn parallel_fft(input: Vec<Complex64>) -> Vec<Complex64> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: see https://rustc-dev-guide.rust-lang.org/overview.html#queries and https://rustc-dev-guide.rust-lang.org/query.html for more information\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 1 previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 1 previous error\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0391`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0391`.\u001b[0m\n"}
